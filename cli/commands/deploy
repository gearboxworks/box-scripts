#!/usr/bin/env bash

declare="${GREEN:=}"
declare="${YELLOW:=}"
declare="${RED:=}"
declare="${CYAN:=}"
declare="${WHITE:=}"
declare="${RESET:=}"

declare="${BOX_INCLUDES_DIR:=}"
declare="${BOX_LOG_FILE:=}"
declare="${BOX_PROJECT_DIR:=}"
declare="${BOX_DEPLOY_LOCK_SLUG:=}"

source "${BOX_INCLUDES_DIR}/deploy.functions"

function deploy_help() {
	cat <<EOF

${YELLOW}WPLib Box ${GREEN}CLI${RESET} ${GREEN}deploy${RESET} usage:

box ${YELLOW}deploy${RESET}	                - Show this help.
box ${YELLOW}deploy ${GREEN}help${RESET}		        - Show this help.
box ${YELLOW}deploy ${RESET}[${CYAN}<host>]${RESET}	        - Deploys the host as defined in ${GREEN}project.json${RESET}.

box ${YELLOW}deploy log${RESET}     	        - Outputs the deploy log using LESS${RESET}
box ${YELLOW}deploy unlock ${RESET}[${CYAN}<host>]${RESET}	- Unlocks a host locked for deploy ${YELLOW}[CAUTION!]${RESET}

EOF
}

function deploy_log() {
    less $BOX_LOG_FILE
}

function deploy_host() {

    initErrorFile

    local host_id="$1"

    if [ "" == "${host_id}" ]; then
        output "Hostname required when calling 'deploy'"
        exit
    fi

    check_deploy_host "${host_id}"
    exitOnError

    ensure_no_uncommitted_files
    exitOnError

    source_url="$(get_source_repo_url)"
    exitOnError

    source_dir="$(get_raw_repo_cache_dir "${source_url}")"
    exitOnError

    git_check_repo_status "${source_dir}"
    exitOnError

    source_branch="$(get_source_repo_branch "${host_id}")"
    exitOnError

    deploy_url="$(get_raw_host_repo_url "${host_id}")"
    exitOnError

    deploy_dir="$(get_raw_repo_cache_dir "${deploy_url}")"
    exitOnError

    deploy_branch="$(get_raw_deploy_host_branch "${host_id}")"
    exitOnError

    output
    output "${YELLOW}Preparing to deploy:${RESET}"
    output
    output "   ${CYAN}Source branch: ${GREEN}${source_branch}${RESET}"
    output "   ${CYAN}Source repo:   ${GREEN}${source_url}${RESET}"
    output
    output "   ${CYAN}Deploy branch: ${GREEN}${deploy_branch}${RESET}"
    output "   ${CYAN}Deploy repo:   ${GREEN}${deploy_url}${RESET}"
    output

    read -p "${CYAN}Do you want to continue this deploy ${RESET}[${YELLOW}yes${RESET}/${GREEN}no${RESET}]? " choice

    if [ "yes" != "${choice}" ] ; then
        exit
    fi

    output

    output "   Locking deploy"
    lock_deploy
    exitOnError

    output "   Pulling any new commits from origin"
    trace $LINENO
    git_pull_deploy "${BOX_PROJECT_DIR}"
    exitOnError

    output "   Updating repository caches"

    cache_repo_locally "${source_url}" "${source_branch}" >> $BOX_LOG_FILE 2>&1

    cache_repo_locally "${deploy_url}" "${deploy_branch}" >> $BOX_LOG_FILE 2>&1

    output "   Running composer install"

    run_composer_install "${source_dir}" >> $BOX_LOG_FILE 2>&1
    exitOnError

    output "   Syncing updated and/or new source files"
    local wp_source_core_path="$(get_raw_source_wp_core_path)"
    local wp_deploy_core_path="$(get_raw_deploy_wp_core_path)"

    #
    # Sync core root files
    # Copy *just* the files in www/blog/ and not subdirectories
    # See: https://askubuntu.com/a/632102/486620
    #
    sync_files_shallow \
        "${source_dir}" \
        "${deploy_dir}" \
        "${wp_source_core_path}" \
        "${wp_deploy_core_path}"  >> $BOX_LOG_FILE

    #
    # Sync core wp-admin path files
    #
    sync_files_deep "${source_dir}" "${deploy_dir}" \
        "${wp_source_core_path}/wp-admin" \
        "${wp_deploy_core_path}/wp-admin"  >> $BOX_LOG_FILE

    #
    # Sync core wp-includes path files
    #
    sync_files_deep "${source_dir}" "${deploy_dir}" \
        "${wp_source_core_path}/wp-includes" \
        "${wp_deploy_core_path}/wp-includes"  >> $BOX_LOG_FILE

    #
    # Sync vendor path files
    #
    sync_files_deep "${source_dir}" "${deploy_dir}" \
        "$(get_raw_source_wp_vendor_path)" \
        "$(get_raw_deploy_wp_vendor_path)"  >> $BOX_LOG_FILE

    #
    # Sync content path files
    #
    sync_files_deep "${source_dir}" "${deploy_dir}" \
        "$(get_raw_source_wp_content_path)" \
        "$(get_raw_deploy_wp_content_path)"  >> $BOX_LOG_FILE

    output "   Removing blacklisted files"
    remove_deploy_delete_files "${deploy_dir}"  >> $BOX_LOG_FILE
    exitOnError

    output "   Copying whitelisted files"
    deploy_keep_files "${source_dir}" "${deploy_dir}"  >> $BOX_LOG_FILE
    exitOnError

    #
    # Write and commit a DEPLOY file with sequential number of latest deploy.
    #
    output "   Writing 'DEPLOY' files"
    add_next_deploy_file  "${host_id}"
    exitOnError

    #
    # Copy the deploy lock to source_dir cache to deploy_dir cache
    #
    copy_file_deploy "$(get_deploy_filename)" "${source_dir}"
    exitOnError

    copy_file_deploy "$(get_deploy_filename)" "${deploy_dir}"
    exitOnError

    output "   Generating deploy log"
    deploy_log="$(get_deploy_log_since_prior_deploy "${deploy_dir}")"
    exitOnError

    output "   Pushing deploy to host: ${host_id}"
    message="$(git_add_commit_push "${host_id}" "${deploy_dir}" "." "${deploy_log}")"
    exitOnError
    output "$(echo "   ${message}" | head -n 1)"

    output "   Tagging deploy"
    tag_this_deploy "${host_id}" "${BOX_PROJECT_DIR}"  quiet
    exitOnError

    tag_this_deploy "${host_id}" "${deploy_dir}" quiet
    exitOnError

    output "   Deploy tagged as $(get_current_deploy_tag)"

    output "   Unlocking deploy"

    deploy_unlock quiet
    exitOnError

    output "   Deploy complete"
    output

}

function deploy_unlock() {
    local quiet="$1"
    trace $LINENO "Quiet: $quiet"
    unlock_git_deploy
    result="$?"
    if [ "0" != "${result}" ] ; then
        trace $LINENO "Result: $result"
        alert
        alert "Deploy unlock ${RED}FAILED${RESET}."
        alert "Try these commands and then Google any error messages to diagnose:"
        alert
        alert "\t${GREEN}git push origin :refs/tags/${BOX_DEPLOY_LOCK_SLUG}${RESET}"
        alert "\t${GREEN}git tag -d ${BOX_DEPLOY_LOCK_SLUG}${RESET}"
        alert
        suggest_help_on_slack
        return 1
    fi
    trace $LINENO
    if [ "" == "${quiet}" ] ; then
        trace $LINENO
        output
        output "Deploy ${GREEN}unlocked${RESET}."
        output
    fi
}



################################################################################
CMD="$1"
trace $LINENO "Command: $CMD"
shift

case $CMD in
    'unlock')
        trace $LINENO
        deploy_unlock
        trace $LINENO
        ;;

    'log')
        trace $LINENO
        deploy_log
        trace $LINENO
        ;;

	*|'help')
        trace $LINENO
        if [ "" == "${CMD}" ] ; then
            trace $LINENO
            deploy_help
            trace $LINENO
            exit 1
        fi
        trace $LINENO
        BOX_IS_DEPLOY=1
        init_deploy_log
        trace $LINENO
        deploy_host "${CMD}"
        trace $LINENO
		;;
esac

