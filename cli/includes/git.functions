#!/usr/bin/env bash

declare="${BOX_PROJECT_DIR:=}"
declare="${BOX_CACHE_DIR:=}"
declare="${DEPLOY_LOG:=}"
declare="${LESS:=}"

function clone_git_repo() {
    repo_url="$1"
}

#
# Returns the URL for the 'origin' remote.
#
function get_git_origin_remote_repo_url() {
    local result="$(git remote -v |grep origin|grep "(push)")"
    local url="$(git remote -v |grep "(push)"|awk '{print $2}')"
    echo "${url}"
}

function get_git_repo_available_branches() {
    echo
}

function get_git_uncommitted_files() {
    local files="$(git status --short)"
    echo "${files}"
}

function cache_repo_locally() {
    local repo_url="$1"
    local branch="$2"
    local cache_dir="$(get_raw_repo_cache_dir "${repo_url}")"
    local saveDir="$(pwd)"
    local parent_dir="$(dirname "${cache_dir}")"
    local repo_name="$(basename "${cache_dir}")"
    ensure_cache_dir
    mkdir -p "${parent_dir}"
    if ! [ -d "${cache_dir}" ]; then
        cd "${parent_dir}"
        git clone "${repo_url}" "${repo_name}"
        cd "${cache_dir}"
        git checkout -b "${branch}" "origin/${branch}"
    fi
    cd "${cache_dir}"
    git checkout "${branch}"
    git fetch --all
    git pull origin "${branch}"
    git reset --hard "origin/${branch}"
    git clean -fd
}

function ensure_cache_dir() {
    declare=${BOX_USER:=}
    sudo mkdir -p "${BOX_CACHE_DIR}"
    sudo chmod 755 "${BOX_CACHE_DIR}"
    sudo chown "${BOX_USER}:${BOX_USER}" "${BOX_CACHE_DIR}"
}

function get_current_git_branch() {
    pushDir
    unset LESS
    cd "${BOX_PROJECT_DIR}"
    branch="$(git rev-parse --abbrev-ref HEAD)"
    echo $branch
    popDir
}

function set_git_user_name_email() {
    name="$1"
    email="$2"
    git config --global user.name "${name}"
    git config --global user.email "${email}"
}

#
# Return all tags starting with "deploy-" but not ones containing (ending with) "^{}"
#
function get_git_deploy_tags() {
    local deploy_tags="$(git ls-remote --tags 2> /dev/null | awk '{print substr($2,11)}' | grep "^deploy-" | grep -vF "^{}")"
    echo -e ${deploy_tags}
}

#
# Return a deploy lock for the given lock ID in $host_id
#
function get_git_deploy_lock() {
    local host_id="$1"
    local lock_slug="$(get_deploy_lock_slug "${host_id}")"
    local deploy_lock="$(get_git_deploy_tags | grep "^${lock_slug}")"
    echo -e "${deploy_lock}"
}

#
# Return all tags starting with "deploy-" but not ones containing (ending with) "^{}"
#
function lock_git_deploy() {
    local host_id="$1"
    local lock_slug="$(get_deploy_lock_slug "${host_id}")"
    git tag -m "Deploy lock for ${host_id}" -a "${lock_slug}" 2> /dev/null
    if [ "0" != "$?" ]; then
        return 1
    fi
    git push --tags  2> /dev/null
    if [ "0" != "$?" ]; then
        git tag -d "${lock_slug}" 2> /dev/null
        return 1
    fi
}

function unlock_git_deploy() {
    local host_id="$1"
    local lock_slug="$(get_deploy_lock_slug "${host_id}")"
    git tag -d ${lock_slug} 2>&1 $DEPLOY_LOG
    git push origin ":refs/tags/${lock_slug}" 2>&1 $DEPLOY_LOG
}

#
# Sorting by length, then by value: https://stackoverflow.com/a/5917762/102699
#
function get_git_next_deploy_num() {
    local host_id="$1"
    local deploy_nums="$(get_git_deploy_tags | grep "^deploy-{$host_id}" | grep -v "^deploy-lock")"
    # Sort by https://stackoverflow.com/a/5917762/102699
    last_deploy="$(echo -e $deploy_nums | awk '{ print length, $2 }' | sort -r -n | cut -d" " -f2- | head -n 1 | sed -e 's#^refs/tags/##')"
    echo $(( last_deploy + 1 ))
}

function git_raw_tag_deploy() {
    local host_id="$1"
    local source_dir="$2"
    local filename="$(get_deploy_filename "${host_id}")"
    local now="$(data +"%A, %Y-%m-%d %r %Z [UTC-%:z]")"
    local user_name="$(get_user_display_name)"
    exitOnError
    pushDir
    cd "${source_dir}"
    local deploy_num="$(cat "${filename}")"
    if [ "" == "${deploy_num}" ] ; then
        return 1
    fi
    git add "${filename}" 2>&1 $DEPLOY_LOG
    if [ "0" == "?$" ] ; then
        return 2
    fi
    local message="Host ${host_id} deployed by ${user_name} on ${now}."
    git commit -m "${message}" 2>&1 $DEPLOY_LOG
    if [ "0" == "?$" ] ; then
        return 3
    fi

    git push 2>&1 $DEPLOY_LOG
    if [ "0" == "?$" ] ; then
        return 4
    fi

    local deploy_tag="$(get_deploy_tag "${host_id}" "${deploy_num}")"
    git tag -a "${deploy_tag}" -m "${message}" 2>&1 $DEPLOY_LOG
    if [ "0" == "?$" ] ; then
        return 5
    fi
    git push --tags 2>&1 $DEPLOY_LOG
    if [ "0" == "?$" ] ; then
        git tag -d "${deploy_tag}" 2>&1 $DEPLOY_LOG
        return 6
    fi
    echo "${deploy_tag}"
}