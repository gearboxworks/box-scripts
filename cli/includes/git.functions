#!/usr/bin/env bash

declare="${BOX_DEPLOY_LOCK_SLUG:=}"
declare="${BOX_PROJECT_DIR:=}"
declare="${BOX_CACHE_DIR:=}"
declare="${DEPLOY_LOG:=}"
declare="${LESS:=}"

function clone_git_repo() {
    repo_url="$1"
}

#
# Returns the URL for the 'origin' remote.
#
function get_git_origin_remote_repo_url() {
    local result="$(git remote -v |grep origin|grep "(push)")"
    local url="$(git remote -v |grep "(push)"|awk '{print $2}')"
    echo "${url}"
}

function get_git_repo_available_branches() {
    echo
}

function get_git_uncommitted_files() {
    local files="$(git status --short)"
    echo "${files}"
}

function cache_repo_locally() {
    local repo_url="$1"
    local branch="$2"
    local cache_dir="$(get_raw_repo_cache_dir "${repo_url}")"
    local saveDir="$(pwd)"
    local parent_dir="$(dirname "${cache_dir}")"
    local repo_name="$(basename "${cache_dir}")"
    ensure_cache_dir
    mkdir -p "${parent_dir}"
    if ! [ -d "${cache_dir}" ]; then
        cd "${parent_dir}"
        git clone "${repo_url}" "${repo_name}"
        cd "${cache_dir}"
        git checkout -b "${branch}" "origin/${branch}"
    fi
    cd "${cache_dir}"
    git checkout "${branch}"
    git fetch --all
    git pull origin "${branch}"
    git reset --hard "origin/${branch}"
    git clean -fd
}

function ensure_cache_dir() {
    declare=${BOX_USER:=}
    sudo mkdir -p "${BOX_CACHE_DIR}"
    sudo chmod 755 "${BOX_CACHE_DIR}"
    sudo chown "${BOX_USER}:${BOX_USER}" "${BOX_CACHE_DIR}"
}

function get_current_git_branch() {
    PushDir
    unset LESS
    cd "${BOX_PROJECT_DIR}"
    branch="$(git rev-parse --abbrev-ref HEAD)"
    echo $branch
    PopDir
}

function set_git_user_name_email() {
    name="$1"
    email="$2"
    git config --global user.name "${name}"
    git config --global user.email "${email}"
}

#
# Return all tags starting with "deploy-" but not "deploy-lock" or ones containing (ending with) "^{}"
#
function get_git_deploy_tags() {
    PushDir "${BOX_PROJECT_DIR}"
    local deploy_tags="$(git ls-remote --tags 2> /dev/null | awk '{print substr($2,11)}' | grep "^deploy-"  | grep -v "${BOX_DEPLOY_LOCK_SLUG}" | grep -vF "^{}")"
    echo -e ${deploy_tags}
    PopDir
}

#
# Return all tags starting with "deploy-" but not ones containing (ending with) "^{}"
#
function lock_git_deploy() {
    local user_name="$1"
    PushDir "${BOX_PROJECT_DIR}"
    git tag -a "${BOX_DEPLOY_LOCK_SLUG}" -m "Deploy lock by ${user_name}" >$DEPLOY_LOG 2>&1
    if [ "0" != "$?" ]; then
        return 1
    fi
    git push --tags  >$DEPLOY_LOG 2>&1
    if [ "0" != "$?" ]; then
        git tag -d "${BOX_DEPLOY_LOCK_SLUG}" 2> /dev/null
        return 2
    fi
    PopDir
}

function unlock_git_deploy() {
    PushDir "${BOX_PROJECT_DIR}"
    #
    # This generates error 1 if tag does not exist
    #
    result="$(git tag -d ${BOX_DEPLOY_LOCK_SLUG} 2>&1)"
    if ! [[ "${result}" =~ ^Deleted ]]; then
        if [ "${result}" != "error: tag 'deploy-lock' not found." ]; then
            return 1
        fi
    fi

    #
    # This does not generate error on non-existent ref
    #
    git push origin ":refs/tags/${BOX_DEPLOY_LOCK_SLUG}" > $DEPLOY_LOG 2>&1
    if [ "0" != "$?" ]; then
        return 2
    fi
    PopDir
}

#
# Sorting by length, then by value: https://stackoverflow.com/a/5917762/102699
#
function get_git_next_deploy_num() {
    PushDir "${BOX_PROJECT_DIR}"
    local deploy_nums="$(get_git_deploy_tags)"
    exitOnError
    # Sort by https://stackoverflow.com/a/5917762/102699
    last_deploy="$(echo -e $deploy_nums | awk '{ print length, $2 }' | sort -r -n | cut -d" " -f2- | head -n 1 | sed -e 's#^refs/tags/##')"
    echo $(( last_deploy + 1 ))
    PopDir
}

function git_raw_tag_deploy() {
    local host_id="$1"
    local repo_dir="$2"
    local filename="$(get_deploy_filename)"

    PushDir "${repo_dir}"

    #
    # Generates return values 1 thru 4 on error
    #
    message="$(git_raw_add_commit_push "${host_id}" "${repo_dir}" "${filename}")"
    error="?$"
    if [ "0" == "${error}" ] ; then
        PopDir
        echo "${message}"
        return "${error}"
    fi

    local deploy_num="$(get_current_deploy_num)"
    if [ "0" == "?$" ] ; then
        PopDir
        return 5
    fi

    local deploy_tag="$(get_deploy_tag "${deploy_num}")"
    git tag -a "${deploy_tag}" -m "${message}" >$DEPLOY_LOG 2>&1
    if [ "0" == "?$" ] ; then
        PopDir
        return 6
    fi

    git push --tags >$DEPLOY_LOG 2>&1
    if [ "0" == "?$" ] ; then
        git tag -d "${deploy_tag}" >$DEPLOY_LOG 2>&1
        PopDir
        return 7
    fi
    PopDir
    echo "${deploy_tag}"
}

function git_raw_add_commit_push() {
    local host_id="$1"
    local repo_dir="$2"
    local filename="$3"

    local now="$(date +"%A, %Y-%m-%d %r %Z [UTC-%:z]")"
    local user_name="$(get_user_display_name)"
    exitOnError

    local message="Host ${host_id} deployed by ${user_name} on ${now}."

    PushDir "${repo_dir}"

    git add "${filename}" >$DEPLOY_LOG 2>&1
    if [ "0" == "?$" ] ; then
        PopDir
        return 1
    fi

    git commit -m "${message}" >$DEPLOY_LOG 2>&1
    if [ "0" == "?$" ] ; then
        PopDir
        return 2
    fi

    git pull >$DEPLOY_LOG 2>&1
    if [ "0" == "?$" ] ; then
        PopDir
        return 3
    fi

    git push >$DEPLOY_LOG 2>&1
    if [ "0" == "?$" ] ; then
        PopDir
        return 4
    fi

    PopDir
    echo "${message}"
}


