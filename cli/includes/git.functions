#!/usr/bin/env bash

declare="${BOX_PROJECT_DIR:=}"
declare="${BOX_CACHE_DIR:=}"
declare="${LESS:=}"

function clone_git_repo() {
    repo_url="$1"
}

#
# Returns the URL for the 'origin' remote.
#
function get_git_origin_remote_repo_url() {
    local result="$(git remote -v |grep origin|grep "(push)")"
    local url="$(git remote -v |grep "(push)"|awk '{print $2}')"
    echo "${url}"
}

function get_git_repo_available_branches() {
    echo
}

function get_git_uncommitted_files() {
    local files="$(git status --short)"
    echo "${files}"
}

function cache_repo_locally() {
    local repo_url="$1"
    local branch="$2"
    local cache_dir="$(get_raw_repo_cache_dir "${repo_url}")"
    local saveDir="$(pwd)"
    local parent_dir="$(dirname "${cache_dir}")"
    local repo_name="$(basename "${cache_dir}")"
    ensure_cache_dir
    mkdir -p "${parent_dir}"
    if ! [ -d "${cache_dir}" ]; then
        cd "${parent_dir}"
        git clone "${repo_url}" "${repo_name}"
        cd "${cache_dir}"
        git checkout -b "${branch}" "origin/${branch}"
    fi
    cd "${cache_dir}"
    git checkout "${branch}"
    git fetch --all
    git pull origin "${branch}"
    git reset --hard "origin/${branch}"
    git clean -fd
}

function ensure_cache_dir() {
    declare=${BOX_USER:=}
    sudo mkdir -p "${BOX_CACHE_DIR}"
    sudo chmod 755 "${BOX_CACHE_DIR}"
    sudo chown "${BOX_USER}:${BOX_USER}" "${BOX_CACHE_DIR}"
}

function get_current_git_branch() {
    pushDir
    unset LESS
    cd "${BOX_PROJECT_DIR}"
    branch="$(git rev-parse --abbrev-ref HEAD)"
    echo $branch
    popDir
}

function set_git_user_name_email() {
    name="$1"
    email="$2"
    git config --global user.name "${name}"
    git config --global user.email "${email}"
}

#
# Return all tags starting with "deploy-" but not ones containing (ending with) "^{}"
#
function get_git_deploy_tags() {
    deploy_tags="$(git ls-remote --tags 2> /dev/null | awk '{print substr($2,11)}' | grep "^deploy-" | grep -vF "^{}")"
    echo -e ${deploy_tags}
}

#
# Return the deploy lock slug for a lock ID
#
function get_git_deploy_lock_slug() {
    local host_id="$1"
    echo -e "deploy-lock-${host_id}"
}

#
# Return a deploy lock for the given lock ID in $host_id
#
function get_git_deploy_lock() {
    local host_id="$1"
    local lock_slug="$(get_git_deploy_lock_slug "${host_id}")"
    deploy_lock="$(get_git_deploy_tags | grep "^${lock_slug}")"
    echo -e "${deploy_lock}"
}

#
# Return all tags starting with "deploy-" but not ones containing (ending with) "^{}"
#
function lock_git_deploy() {
    local host_id="$1"
    local lock_slug="$(get_git_deploy_lock_slug "${host_id}")"
    git tag -m "Deploy lock for ${host_id}" -a "${lock_slug}" 2> /dev/null
    if [ "0" != "$?" ]; then
        return 1
    fi
    git push --tags  2> /dev/null
    if [ "0" != "$?" ]; then
        git tag -d "${lock_slug}" 2> /dev/null
        return 1
    fi
}

function unlock_git_deploy() {
    local host_id="$1"
    local lock_slug="$(get_git_deploy_lock_slug "${host_id}")"
    git tag -d ${lock_slug} 1> /dev/null 2> /dev/null
    git push origin ":refs/tags/${lock_slug}" 1> /dev/null 2> /dev/null
}

